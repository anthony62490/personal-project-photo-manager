CREATE TABLE photo
(
  pid SERIAL PRIMARY KEY,
  url VARCHAR(200) NOT NULL,
  title VARCHAR(100) DEFAULT "Untitled",
  uid INTEGER NOT NULL,
  datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE user
(
  uid SERIAL PRIMARY KEY,
  uname VARCHAR(50),
  email VARCHAR(200),
  phone INTEGER,
  avatar VARCHAR(200),
  upload_count INTEGER,
  created_date date
);

CREATE TABLE tag_ref (
  tid SERIAL PRIMARY KEY,
  tag_name VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE tag (
  tid INTEGER NOT NULL,
  pid INTEGER NOT NULL,
  UNIQUE (tid, pid)
);

CREATE TABLE tag_alias (
  alias_id SERIAL PRIMARY KEY,
  old_name varchar(50) NOT NULL UNIQUE,
  new_name varchar(50) NOT NULL
);

CREATE TABLE tag_imp
(
  imp_id SERIAL PRIMARY KEY,
  predicate VARCHAR(50),
  implies VARCHAR(50)
);



photo
pid 	integer
url 	varchar(200)
uid 	integer
desc  varchar(2000)

tag
pid 			integer
tag_name 	varchar(50)

tag_ref
tid 	integer
pid 	integer

user
uid 					integer
uname 				varchar(50)
email 				varchar(200)
phone 				integer
avatar 				varchar(200)
upload_count 	integer
created_date 	date

===== OR =====

user
uid 					integer
uname 				varchar(50)
email 				varchar(200)
phone 				integer
avatar 				varchar(200)
upload_count 	integer
created_date 	date

photo
pid 	integer
url 	varchar(200)
uid 	integer
desc  varchar(2000)
tags  array --holds a list of tag ids

tag
tid        integer
tag_name   varchar(50)
assoc_pid  array --holds a list of photo ids


// UNUSED QUERIES //

/ Gets the count of all tagged photos /
SELECT COUNT(*), photo.pid
  FROM tag
  JOIN photo ON photo.pid = tag.pid
  GROUP BY photo.pid;

/ Pulls pids of all untagged photos /
SELECT photo.*
  FROM photo
  WHERE NOT EXISTS(
    SELECT NULL
    FROM tag
    WHERE photo.pid = tag.pid)

